---
name: Create Release
on:
  workflow_dispatch:
    inputs:
      version:
        description: "Version tag? Format: x.y.z"
        required: true

jobs:
  create-release:
    name: "Create Release"
    runs-on: ubuntu-latest
    steps:
      - name: Verify that version is a valid version number
        run: if [[ '${{ github.event.inputs.version }}' =~ ^[0-9]+.[0-9]+.[0-9]+$ ]]; then echo 'Version number valid'; else echo 'Version number does not match required format!'; exit 1; fi

      - name: Check out codebase
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          # main is protected, to push to it, we need a PAT from an admin
          token: ${{ secrets.MAIN_BRANCH_ADMIN_PAT }}

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.9"

      - name: Get last release version
        run: echo "RELEASE_VERSION=$(git describe --tags --abbrev=0)" >> $GITHUB_ENV
      - name: Ensure that new version number is larger than the previous release
        run: python3 -c 'from packaging import version; import sys; sys.exit("New version number is not higher than previous") if version.parse("${{ env.RELEASE_VERSION }}") >= version.parse("${{ github.event.inputs.version }}") else sys.exit()'

      - name: Install dependencies
        run: |
          docker pull quay.io/git-chglog/git-chglog:latest
          python -m pip install --upgrade pip
          pip install --upgrade poetry
      - name: Configure git
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "noreply@github.com"

      - name: Set app version
        run: poetry version "${{ github.event.inputs.version }}"

      - name: Generate full changelog and remove git-chglog files
        run: |
          docker run -v "$PWD":/workdir quay.io/git-chglog/git-chglog --next-tag v${{ github.event.inputs.version }} > CHANGELOG.md

      - name: Build project
        run: poetry build

      - name: Create and push Release commit
        run: |
          git add CHANGELOG.md pyproject.toml
          git commit -m "Release ${{ github.event.inputs.version }}"
          git push
      - name: Get release commit hash
        run: echo "release_hash=$(git rev-parse HEAD)" >> $GITHUB_ENV
      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.event.inputs.version }}
          commitish: ${{ env.release_hash }}
          release_name: ${{ github.event.inputs.version }}
          draft: false
          prerelease: false

      # Required because poetrys package naming isn't neccesarily the same as the release tag, expecially for prereleases.
      - name: Rename Release Asset to predictable name
        run: mv ./dist/*.tar.gz ./dist/app.tar.gz

      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./dist/app.tar.gz
          asset_name: app-${{ github.event.inputs.version }}.tar.gz
          asset_content_type: application/tar+gzip

      - name: Publish package on PyPI
        uses: pypa/gh-action-pypi-publish@master
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}
